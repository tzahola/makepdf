#!/usr/bin/env bash
set -euo pipefail

dir="$1"; shift

if [[ "$dir" == "--help" ]]; then
	cat <<END
makepdf: Creates a single PDF booklet from multiple scanned images in a folder structure like this:
Usage:   makepdf input_dir

  input_dir/
    01 - Front cover/
      01 - Front cover outside.png
      02 - Front cover inside.png
    02 - Booklet/
      01 - Booklet front.png
      02 - Booklet 1-2.png
      03 - Booklet 3-4.png
      04 - Booklet 5-6.png
      05 - Booklet back.png
    03 - CD/
      01 - CD front.png
      02 - CD back.png
    04 - Back cover/
      01 - Back cover inside.png
      02 - Back cover outside.png

The resulting PDF will contain the folder- and filenames as bookmark titles (without the file extension and leading numerals).
END
	exit
fi

pages=0
pdfs=()
originals=()

tmpdir="$(mktemp -d)"
infofile="$(mktemp)"

echo "Artist (optional): "
read -r artist
if [[ "$artist" != "" ]]; then
	echo "InfoBegin" >> "$infofile"
	echo "InfoKey: Author" >> "$infofile"
	echo "InfoValue: $artist" >> "$infofile"
fi

echo "Title (optional): "
read -r title
if [[ "$title" != "" ]]; then
	echo "InfoBegin" >> "$infofile"
	echo "InfoKey: Title" >> "$infofile"
	echo "InfoValue: $title" >> "$infofile"
fi

echo "Output (default=$dir/booklet.pdf): "
read -r pdffile

echo "Table of contents:"

level=0
function processdir {
	level=$(( $level + 1 ))
	for file in "$1/"*; do
        local name="$(basename "$file")"

		if [[ -d "$file" ]]; then
			local title="${name#*\ -\ }"
			{
                echo "BookmarkBegin"
			    echo "BookmarkTitle: $title"
			    echo "BookmarkLevel: $level"
			    echo "BookmarkPageNumber: $(( $pages + 1 ))"
            } >> "$infofile"

			printf "%$(( $level * 4 ))s%s\n" "$title"

            mkdir "$tmpdir/$(realpath --relative-to="$dir" "$file")"
			processdir "$file"
		elif [[ "$name" == *.jpg || "$name" == *.jpeg || "$name" == *.png || "$name" == *.tif ]]; then
			local title="${name#*\ -\ }"
			title="${title%.*}"
            {
                echo "BookmarkBegin"
                echo "BookmarkTitle: $title"
                echo "BookmarkLevel: $level"
                echo "BookmarkPageNumber: $(( $pages + 1 ))"
            } >> "$infofile"

			printf "%$(( $level * 4 ))s%s\n" "$title"
            
            local pdffile="$tmpdir/$(realpath --relative-to="$dir" "$file").pdf"
            img2pdf -o "$pdffile" "$file"

			pdfs+=("$pdffile")
			originals+=("$file")
			pages=$(( $pages + 1 ))
		fi
	done
	level=$(( $level - 1 ))
}

processdir "$dir"

if [[ "$pdffile" == "" ]]; then
	pdffile="$dir/booklet.pdf"
fi

echo "Creating final PDF file at $pdffile"
pdftk "${pdfs[@]}" cat output "$pdffile"
pdftk "$pdffile" update_info_utf8 "$infofile" output "$pdffile.tmp"
mv "$pdffile.tmp" "$pdffile"

rm -r "$tmpdir" "$infofile"

echo "Checking losslessness:"
tmpdir="$(mktemp -d)"
pdf2img "$pdffile" "$tmpdir"

while read -r original && read -r new; do
    echo "Comparing $original vs $new"
    if [[ "$original" == *.png || "$original" == *.tif ]]; then
        cmp <(convert "$original" RGBA:-) <(convert "$new" RGBA:-) || { echo "Error: pixel data mismatch!"; exit 1; }
        cmp <(exiftool -b -icc_profile "$original") <(exiftool -b -icc_profile "$new") || { echo "Error: ICC profile mismatch!"; exit 1; }
    else
        cmp "$original" "$new" || { echo "Error!"; exit 1; }
    fi
done < <(paste -d '\n' <(printf '%s\n' "${originals[@]}") <(printf '%s\n' "$tmpdir"/*))

rm -r "$tmpdir"
